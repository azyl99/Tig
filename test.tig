/*let
	type INT = int
	type INTEGER = int
	
	//type node = {key:int, s:STR}	//undefined type STR
	type node = {name: string, age: int}
	type list = {head:int, tail:list}
	type tree = {key:int, children:treelist}
	type treelist = {head:tree, tail:tree}
	
	//var x : INTEGER := "1"	//assign incompatible type to variable 'x'(need 'INTEGER', not'string')
	var x : INTEGER := 1
	var y := 1
	var haha : node := nil
	var li := list{head=1, tail=nil}
	var mytree := tree{key=1+2, children=nil}
	
	type intArray = array of int
	var row := intArray [1] of 0
in(
	1;
	haha := node{name="zyl", age=19};
	li := list{head=2, tail = li};
	mytree := tree{key=x, children=li};
	mytree := tree{key=x, children=nil}
	
)end*/

/************IR*************************/

//序列数组记录类型定义
let 
	type INT = int
	type intlist = {a:int,b:int,c:int}
	type arr = array of int
	var rec :intlist := intlist{a=3,b=2,c=6}
	var a : arr := arr[3] of 0
	var b :INT := 1
in
	b := rec.b;
	b := a[2];
	3
end

//op
/*let 
	type INT = int
in
	3=2;
	3<>2;
	3>=2;
	3>2;
	3<2;
	3<=2;
	3|2;
	3&2
end*/

//if else then
/*let 
	type INT = int
	var a := 3
in
	while a<=1
	do(a := a -1;
	   break);
	for i := 1 to 3
	do  a := a+1
end*/










